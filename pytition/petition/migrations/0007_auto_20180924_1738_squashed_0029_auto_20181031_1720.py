# -*- coding: utf-8 -*-
# Generated by Django 1.11.14 on 2018-11-11 17:17
from __future__ import unicode_literals

import colorfield.fields
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import tinymce.models


def createPytitionUsers(apps, schema_editor):
	PytitionUser = apps.get_model('petition', 'PytitionUser')
	User = apps.get_model(*settings.AUTH_USER_MODEL.split('.'))
	for u in User.objects.all():
		print("Creating PU for User \'{}\'".format(u.first_name))
		pu = PytitionUser.objects.create()
		pu.user = u
		pu.save()


def destroyPytitionUsers(apps, schema_editor):
	PytitionUser = apps.get_model('petition', 'PytitionUser')
	for pu in PytitionUser.objects.all():
		pu.delete()


class Migration(migrations.Migration):

    replaces = [('petition', '0007_auto_20180924_1738'), ('petition', '0008_auto_20180924_1739'), ('petition', '0009_auto_20180925_1057'), ('petition', '0010_auto_20181007_1620'), ('petition', '0011_pytitionuser_invitations'), ('petition', '0012_auto_20181022_2127'), ('petition', '0013_auto_20181022_2130'), ('petition', '0014_auto_20181022_2138'), ('petition', '0015_organization_default_template'), ('petition', '0016_auto_20181027_1635'), ('petition', '0017_petitiontemplate_id'), ('petition', '0018_auto_20181031_1329'), ('petition', '0019_auto_20181031_1405'), ('petition', '0020_templateownership'), ('petition', '0021_remove_organization_petition_templates'), ('petition', '0022_organization_petition_templates'), ('petition', '0023_remove_pytitionuser_petition_templates'), ('petition', '0024_pytitionuser_petition_templates'), ('petition', '0025_auto_20181031_1437'), ('petition', '0026_auto_20181031_1438'), ('petition', '0027_auto_20181031_1647'), ('petition', '0028_auto_20181031_1720'), ('petition', '0029_auto_20181031_1720')]

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('petition', '0006_auto_20181015_0851'),
    ]

    operations = [
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Name')),
            ],
        ),
        migrations.CreateModel(
            name='PetitionTemplate',
            fields=[
                ('side_text', tinymce.models.HTMLField(blank=True)),
                ('target', models.IntegerField(blank=True, null=True)),
                ('linear_gradient_direction', models.CharField(blank=True, choices=[('no gradient', 'no gradient'), ('to right', 'to right'), ('to bottom', 'to bottom'), ('to bottom right', 'to bottom right'), ('to bottom left', 'to bottom left')], default='no gradient', max_length=15)),
                ('gradient_from', colorfield.fields.ColorField(blank=True, max_length=18)),
                ('gradient_to', colorfield.fields.ColorField(blank=True, max_length=18)),
                ('bgcolor', colorfield.fields.ColorField(blank=True, max_length=18)),
                ('footer_text', tinymce.models.HTMLField(blank=True, default='This petition is hosted on RAP website.')),
                ('footer_links', tinymce.models.HTMLField(blank=True)),
                ('twitter_description', models.CharField(blank=True, max_length=200)),
                ('twitter_image', models.CharField(blank=True, max_length=500)),
                ('has_newsletter', models.BooleanField(default=False)),
                ('newsletter_subscribe_http_data', models.TextField(blank=True)),
                ('newsletter_subscribe_http_mailfield', models.CharField(blank=True, max_length=100)),
                ('newsletter_subscribe_http_url', models.CharField(blank=True, max_length=1000)),
                ('newsletter_subscribe_mail_subject', models.CharField(blank=True, max_length=1000)),
                ('newsletter_subscribe_mail_from', models.CharField(blank=True, max_length=500)),
                ('newsletter_subscribe_mail_to', models.CharField(blank=True, max_length=500)),
                ('newsletter_subscribe_method', models.CharField(choices=[('MAIL', 'MAIL'), ('POST', 'POST'), ('GET', 'GET')], default='MAIL', max_length=4)),
                ('newsletter_subscribe_mail_smtp_host', models.CharField(blank=True, default='localhost', max_length=100)),
                ('newsletter_subscribe_mail_smtp_port', models.IntegerField(default=25)),
                ('newsletter_subscribe_mail_smtp_user', models.CharField(blank=True, max_length=200)),
                ('newsletter_subscribe_mail_smtp_password', models.CharField(blank=True, max_length=200)),
                ('newsletter_subscribe_mail_smtp_tls', models.BooleanField(default=False)),
                ('newsletter_subscribe_mail_smtp_starttls', models.BooleanField(default=False)),
                ('org_twitter_handle', models.CharField(blank=True, max_length=20)),
                ('newsletter_text', models.CharField(blank=True, max_length=1000)),
                ('sign_form_footer', models.TextField(blank=True)),
                ('confirmation_email_sender', models.CharField(max_length=100, blank=True)),
                ('confirmation_email_smtp_host', models.CharField(default='localhost', blank=True, max_length=100)),
                ('confirmation_email_smtp_port', models.IntegerField(blank=True, default=25)),
                ('confirmation_email_smtp_user', models.CharField(blank=True, max_length=200)),
                ('confirmation_email_smtp_password', models.CharField(blank=True, max_length=200)),
                ('confirmation_email_smtp_tls', models.BooleanField(default=False)),
                ('confirmation_email_smtp_starttls', models.BooleanField(default=False)),
                ('name', models.CharField(db_index=True, unique=True, max_length=50, verbose_name='Name')),
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID'))
            ],
        ),
        migrations.CreateModel(
            name='PytitionUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('organizations', models.ManyToManyField(blank=True, related_name='members', to='petition.Organization')),
                ('petitions', models.ManyToManyField(blank=True, to='petition.Petition')),
                ('user', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='pytitionuser', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='organization',
            name='petitions',
            field=models.ManyToManyField(blank=True, to='petition.Petition', verbose_name='Petitions'),
        ),
        migrations.RunPython(
            code=createPytitionUsers,
            reverse_code=destroyPytitionUsers,
        ),
        migrations.AlterField(
            model_name='pytitionuser',
            name='user',
            field=models.OneToOneField(default=None, on_delete=django.db.models.deletion.CASCADE, related_name='pytitionuser', to=settings.AUTH_USER_MODEL),
            preserve_default=False,
        ),
        migrations.CreateModel(
            name='Permission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('can_add_members', models.BooleanField()),
                ('can_remove_members', models.BooleanField()),
                ('can_create_petitions', models.BooleanField()),
                ('can_modify_petitions', models.BooleanField()),
                ('can_delete_petitions', models.BooleanField()),
                ('can_view_signatures', models.BooleanField()),
                ('can_modify_signatures', models.BooleanField()),
                ('can_delete_signatures', models.BooleanField()),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='petition.Organization')),
            ],
        ),
        migrations.AddField(
            model_name='pytitionuser',
            name='permission',
            field=models.ManyToManyField(blank=True, related_name='user', to='petition.Permission'),
        ),
        migrations.AddField(
            model_name='pytitionuser',
            name='invitations',
            field=models.ManyToManyField(blank=True, related_name='invited', to='petition.Organization'),
        ),
        migrations.CreateModel(
            name='TemplateOwnership',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('organization', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='petition.Organization')),
                ('template', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='petition.PetitionTemplate')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='petition.PytitionUser')),
            ],
        ),
        migrations.AddField(
            model_name='organization',
            name='petition_templates',
            field=models.ManyToManyField(blank=True, through='petition.TemplateOwnership', to='petition.PetitionTemplate', verbose_name='Petition templates'),
        ),
        migrations.AddField(
            model_name='pytitionuser',
            name='petition_templates',
            field=models.ManyToManyField(blank=True, through='petition.TemplateOwnership', to='petition.PetitionTemplate', verbose_name='Petition templates'),
        ),
        migrations.AddField(
            model_name='organization',
            name='default_template',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='petition.PetitionTemplate', verbose_name='Default petition template'),
        ),
        migrations.AddField(
            model_name='pytitionuser',
            name='default_template',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='petition.PetitionTemplate', verbose_name='Default petition template'),
        ),
    ]
